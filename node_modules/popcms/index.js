var express = require('express');  
var passport = require('passport');
var GoogleStrategy = require('passport-google-oauth').OAuth2Strategy;

 
var config = {}; 
if (typeof String.prototype.endsWith !== 'function') {
    String.prototype.endsWith = function(suffix) {
        return this.indexOf(suffix, this.length - suffix.length) !== -1;
    };
} 

// export create server method
// this is the main entry point for client app usage
exports.createServer = function(config) {
    config = config || {};

	// if settings haven't provided a collection name prefix, add one here.
    config.dbCollectionNamePrefix = config.dbCollectionNamePrefix || "popcms-collection-"; 
 
    var server = express();  
    server.use(express.cookieParser()); 
    server.use(express.bodyParser());
    server.use(express.session({ secret: config.secret })); 
    server.use(passport.initialize());
    server.use(passport.session());
    
	server.config = config;
	
	passport.serializeUser(function(user, done) {
	  done(null, user);
	}); 
	passport.deserializeUser(function(user, done) {
	  done(null, user);
	});  

	config.httpOrHttps = config.httpOrHttps || "http";
	config.port = config.port || 80;

	try{
		switch(process.env.NODE_ENV){
			case 'dev':
			{
				config.host = config.dev.host;
				config.httpOrHttps = config.dev.httpOrHttps;
				config.port = config.dev.port;
				break;
			}
		}
	}
	catch(e)
	{}

	// it's possible we need to ignore the port here based on env properties
	var port = Number(process.env.PORT || config.port);

	// setup the google auth - we use this for allowing CMS admin users to login by browsing to ~/login/
	var siteBaseUrl = config.httpOrHttps  + '://' + config.host;
	if(config.port !== null && config.port !== ""){
		if(!((config.httpOrHttps === "http" && config.port == 80) || (config.httpOrHttps === "https" && config.port === 443))){
			// non standard port - add this to the callback url
			siteBaseUrl += ":" + config.port;
		}
	}

	passport.use(new GoogleStrategy({
		clientID     : config.googleAuth.clientID,
		clientSecret : config.googleAuth.clientSecret,
		callbackURL  : siteBaseUrl + '/auth/google/callback' 						
	},
	function(token, refreshToken, profile, done) { 
		process.nextTick(function() {
		var User = {"openId":profile.id, emailAddress: profile.emails[0].value, "displayName": profile.displayName}; 
 
		if((typeof(config.adminEmail) !== "undefined" && config.adminEmail !== null && User.emailAddress===config.adminEmail)
		|| (typeof(config.adminEmails) !== "undefined" && config.adminEmails !== null && config.adminEmails.indexOf(User.emailAddress) >= 0))
		{
			console.log("*****************************ADMIN USER LOGGED IN SUCCESSFULLY *****************************")
			done(false, User);
		}
		else
		{
			console.log("*****************************ADMIN USER LOG IN FAILED (" + User.emailAddress + ")*****************************")
			return done(null, false, { message: 'Invalid user account.' });
		} 
		});
	}));

	 /* Handle static files*/
    server.use('/css', express.static(config.staticFilePath + '/css'));
    server.use('/img', express.static(config.staticFilePath + '/img'));
    server.use('/fonts', express.static(config.staticFilePath + '/fonts'));
    server.use('/js', express.static(config.staticFilePath + '/js'));
    server.get('/robots.txt', function(req, res){
		res.sendfile(config.staticFilePath + '/robots.txt');
	});
    server.get('/favicon.ico', function(req, res){
		res.sendfile(config.staticFilePath + '/favicon.ico');
	});
    server.use(express.session({ secret: config.secret })); 
    server.use(passport.initialize());
    server.use(passport.session());
	 
    server.get('/login', passport.authenticate('google', { scope : ['profile', 'email'] }));

    // the callback after google has authenticated the user
    server.get('/auth/google/callback',
            passport.authenticate('google', {
                    successRedirect : '/',
                    failureRedirect : '/login/'
            }));      
                                    
    server.get('/logout', function(req, res){
        req.logout();
        res.redirect('/');
    });


    require('./api/content-types')(server);
    require('./api/contact')(server);
    require('./api/pages')(server);
    require('./content')(server);
	
	
	server.listen(port, function() { 
	  	console.log("**********************************************************************");
	  	console.log("********************************POPCMS********************************");
	  	console.log("**********************************************************************");
	  	console.log("");
	  	console.log("Congratulations your POPCMS aplication is running at\n" + siteBaseUrl);
	  	console.log(""); 
	  	console.log("You can login in to admin using through a Google Auth for one of the \nfollowng accounts at \n" + siteBaseUrl + "/login");
	  	console.log(""); 
		if(typeof config.adminEmail != "undefined" && config.adminEmail != null)
		{
	  		console.log("Google account: " + config.adminEmail );
		}
		if(typeof config.adminEmails != "undefined" && config.adminEmails != null && config.adminEmails.length > 0)
		{
			for (var i = 0, len = config.adminEmails.length; i < len; i++) {
	  		console.log("Google account: " + config.adminEmails[i] ); 
			} 
		}
	  	console.log("");
	  	console.log("If you get any errors, be sure to check back here!");
	  	console.log("");
	  	console.log("**********************************************************************");
	  	console.log("**********************************************************************");
	  	console.log("**********************************************************************");
	});
	
    return true;
}; 
 