/* 
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

function parseNodesToNav(nodes, level, bootstrapClass, currentUrl, baseUrl) { 
	var list;
			console.log(nodes);
	if (nodes) {
       bootstrapClass = bootstrapClass || "";
       baseUrl = baseUrl || "";
        if(level == 0)
        {
            bootstrapClass += " nav navbar-nav";
        }
		var list = "<ul class='navLevel" + level + "  " + bootstrapClass + "'>";
		for(var i=0; i<nodes.length; i++) {
			list += parseNodeToNav(nodes[i], level, currentUrl, baseUrl);
		}
		list += "</ul>";
	}
    return list;
}

function parseNodeToNav(node, level, currentUrl, baseUrl) { // takes a node object and turns it into a <li>
    var item = "";
    var style = node.style || "";
    var itemCssClass = "";
    var childCssClass = "";
    
    baseUrl = baseUrl || "";

    var itemUrl = baseUrl + node.url; 
   // page, or child page of this nav item?
    var isActive =  itemUrl == currentUrl || (itemUrl.length > 1 && (currentUrl.substring(0, itemUrl.length) == itemUrl));
    if(isActive){
        itemCssClass="active";
    }

    // opening tag and this item's own content
    switch (style)
    {
        case "dropdown":
        {
            item += "<li class=\"dropdown " + itemCssClass +  "\">";
            item += "<a class=\"dropdown-toggle\" data-toggle=\"dropdown\" role=\"button\" aria-haspopup=\"true\" aria-expanded=\"false\" href='" + itemUrl + "'>" 
            + node.name + "<span class=\"caret\"></span></a>";  
            childCssClass = "dropdown-menu";
            break;
        }
        default : {

            item += "<li class=\"" + itemCssClass +  "\"><a href='" + itemUrl + "'>"; 
            item += node.name; 
            item += "</a>"; 
                break;
        }
    }
 

    // children
    if(node.pages) item += parseNodesToNav(node.pages, level + 1, childCssClass, currentUrl, itemUrl);
	
    // closing item tag
    item += "</li>";
    return item;
}


exports.register = function(handlebars){ 
    handlebars.registerHelper('select', function(selected, options) {
        console.log("Selected:"+selected);
        return options.fn(this).replace(
            new RegExp(' value=\"' + selected + '\"'),
            '$& selected="selected"');
    }); 

	handlebars.registerHelper('nav', function (pages, currentUrl, options){ 
		if(pages)
		{ 
			return parseNodesToNav(pages, 0, null, currentUrl);
		}
	});


    handlebars.registerHelper('ifMatch', function (v1, v2, options) {
        if (v1 === v2) {
            console.log(v1 + " does match " + v2);
            return options.fn(this);
        }
            console.log(v1 + " does NOT match " + v2);
        return options.inverse(this);
    });
    
    handlebars.registerHelper('ifMatchTwice', function (v1, v2, v3, v4, options) {
        if (v1 === v2 && v3 === v4) {
            return options.fn(this);
        }
        return options.inverse(this);
    });
    
    handlebars.registerHelper('ifMatchPlusNullOrEmpty', function (match1Item, match2Item, nullOrEmptyItem, options) {
        if (match1Item === match2Item && (nullOrEmptyItem === null || nullOrEmptyItem === "") ) {
            return options.fn(this);
        }
        return options.inverse(this);
    });
    
    handlebars.registerHelper('ifNullOrEmpty', function (v1, options) {
        if (v1 === null || v1 === "") {
            return options.fn(this);
        }
        return options.inverse(this);
    });

    handlebars.registerHelper('for', function (from, to, incr, block) {
        var accum = '';
        for (var i = from; i < to; i += incr)
            accum += block.fn(i);
        return accum;
    });

    handlebars.registerHelper('times', function (n, block) {
        var accum = '';
        for (var i = 0; i < n; ++i)
            accum += block.fn(i);
        return accum;
    });

    handlebars.registerHelper('forlength', function (item, block) {
        var accum = '';
        for (var i = 0; i < item.length; i++)
            accum += block.fn(i);
        return accum;
    }); 
}